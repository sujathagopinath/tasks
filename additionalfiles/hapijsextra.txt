  // await server.register({
    //     plugin: require('hapi-auth-jwt'),(err) => {

    // // We're giving the strategy both a name
    // // and scheme of 'jwt'
    // server.auth.strategy('jwt', 'jwt', {
    //     key: secret,
    //     verifyOptions: { algorithms: ['HS256'] }
    // });


 try {
                const { username, email, password, phonenumber } = request.payload
                const userExist = await userModel.findOne({ email: email })
                if (userExist) {
                    return 'User has already taken'
                }
                const usercreated = await userModel.create({ username, password, email, phonenumber })
                const result = await usercreated.save()
                return h.response(result).code(200);
            } catch (error) {
                return h.response(error).code(500)
            }



handler: async (req, h) => {
            let user = new userModel();
            user.email = req.payload.email;
            console.log("email", req.payload.email)
            user.username = req.payload.username;
            user.phonenumber = req.payload.phonenumber;
            user.password = req.payload.password;

            // hashPassword(request.payload.password, (err, hash) => {
            //     if (err) {
            //         throw Boom.badRequest(err);
            //     }
            //     user.password = hash;
            user.save((err, user) => {
                if (err) {
                    throw Boom.badRequest(err);
                }
                // If the user is saved successfully, issue a JWT
                return h.response({ id_token: createToken(user) }).code(201);
            });
        },