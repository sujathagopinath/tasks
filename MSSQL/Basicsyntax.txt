Example for constraints in SQL

CREATE TABLE PERSONALINFO(
ID INT NOT NULL,
FIRSTNAME VARCHAR(25) NOT NULL,
LASTNAME VARCHAR(35) NOT NULL,
AGE INT CONSTRAINT CONS_PERSON_AGE CHECK(AGE>=18)
EMAIL NVARCHAR(30) NOT NULL UNIQUE,
CITY VARCHAR(30) DEFAULT 'CHENNAI',
CONSTRAINT PK_PERSONINFO(ID)
);

ALTER TABLE PERSONINFO ADD CONSTRAINT PK_PERSON_LASTNAME PRIMARY KEY(FIRSTNAME)

ALTER TABLE PERSONINFO DROP CONSTRAINT PK_PERSON_LASTNAME 

INSERT WAYS:

INSERT INTO TABLENAME(COL1,COL2...)VALUES(VA1,VAL2)
INSERT INTO TABLENAME VALUES(VAL1,VAL2)
INSERT INTO TABLE_NAME[(COLUMN_LIST)]<SELECT QUERY>

SELECT WAYS:

SELECT COL1,COL2.. FROM TABLE_NAME
SELECT * FORM TABLE_NAME
SELECT DISTINCT COL1,COL2...FROM TABLE_NAME
SELECT TOP NUMBER COL_NAMES FROM TABLE_NAME
SELECT COL1,COL2..FROM TABLE_NAME WHERE[CONDITION]

SQL OPERATORS

NOT IN:
SELECT * FROM TABLE_NAME WHERE COL_NAME NOT IN('DATA1','DATA2')

ISNOT NULL:

SELECT * FROM TABLE_NAME WHERE COL_NAME IS NOT NULL;

NOT OPERATOR WITH LIKE CONDITION

Retrives all employee from the table "employees" which follows the NOT LIKE condition.
Display only names which does not begin with that letter

Syntax: SELECT * FROM TABLE_NAME WHERE NAME NOT LIKE 'M%'

NOT OPEARTOR WITH BETWWEN CONDITION

SELECT * FROM TBL WHERE ID NOT BETWEEN 8 AND 13

NOT OPERATOR EXISTS CONDITION

SELECT * FROM TBL WHERE NOT EXISTS()

IS NULL OPERATOR INSERT STATEMENT

INSERT INTO TBL COL_NAME
SELECT COL_NAME FROM TBL
WHERE NAME IS NULL

UPDATE TBL
SET COL_NAME =
WHERE COL_NAME IS NULL

LIKE OPERATORS
% =>USED TO MATCH STRING OF ANY LENGTH
- => USED TO MATCH ON A SINGLE CHARACTERS
[] => USED TO MATCH ANY CHARACTER IN BRACKETS
[^] => MATCH ON ANY CHARACTERS NOT IN[^]

GROUPING SETS
SYNTAX:

SELECT column_list, aggregate(column_name)  
FROM table_name  
GROUP BY  
GROUPING SETS (  
(column1, column2),  
(column1),  
(column2),  
()  
); 

Column_list: It indicates the column's name that we want to retrieve in a result set from the table.
aggregate(column_name): It indicates the column on which aggregate function (i.e. SUM, COUNT, AVG etc.) is applied
GROUP BY: It is used to specify a column or list of columns as a single group.
GROUPING SET: It indicates the set of columns that have to be grouped together.
(): It is optional that specifies an empty grouping set and aggregates columns individually.

GROUPING SET EQUIVALENT => CUBE, ROLLUP, UNIONALL


SS Foreign Key

CREATE TABLE child_table  
(  
  column1 datatype [ NULL | NOT NULL ],  
  column2 datatype [ NULL | NOT NULL ],  
  ...  
  CONSTRAINT fk_name  
    FOREIGN KEY (child_col1, child_col2, ... child_col_n)  
    REFERENCES parent_table (parent_col1, parent_col2, ... parent_col_n)  
    [ON DELETE {NO ACTION | CASCADE | SET NULL | SET DEFAULT} ]  
    [ON UPDATE {NO ACTION | CASCADE | SET NULL | SET DEFAULT} ]   
);  

child_table: It specifies the name of the child table that you want to create.

column1, column2: It specifies the columns that you want to create in the table. Each column must have a datatype. The column should either be defined as NULL or NOT NULL and if this value is left blank, the database assumes NULL as the default.

fk_name: It specifies the name of the foreign key constraint that you want to create.

child_col1, child_col2, ... child_col_n: It specifies columns in child_table that will reference a primary key in the parent_table.

parent_table: It specifies the name of the parent table whose primary key will be used in the child_table.

parent_col1, parent_col2, ... parent_col3: It specifies columns that make up the primary key in the parent_table. The foreign key will enforce a link between this data and the child_col1, child_col2, ... child_col_n columns in the child_table.


VIEWS

SYNTAX:

CREATE VIEW VIEW_NAME AS
SELECT COL1,COL2....
FROM TABLE_NAME WHERE[COND]

UPDATE VIEW : IN UPDATE VIEW ALTER CAN ALSO BE USED

CREATE OR REPLACE VIEW VIEW_NAME AS
SELECT COL1,COL2...
FROM TABLE_NAME
WHERE CONDITION

DROP:
DROP VIEW VIEW_NAME

SUBSTRINGS:

SYNTAX: SUBSTRING(Expression, Position, Length)  

 lITERAL STRINGS: SELECT SUBSTRING('SUBSTRING IN SQL Server', 4, 13) AS result;  
It takes the value from s and ends with l.. The position starts from 1 not 0.

Substrings using table:
SELECT col_name, SUBSTRING(col_name,pos,len) AS "" from table_name

EG: SELECT person_name, SUBSTRING(person_name, 1, 4) AS p_name  
      ,email, SUBSTRING(email, 5, 8) AS sub_mail  
FROM persons;   

Substrings using Charindex

SELECT person_name, email,   
    SUBSTRING(email, CHARINDEX('@', email) + 1, LEN(email)) AS DomainName  
FROM persons;   
 output: After the @ symbol will be the resut of email id.

This function finds the index position of the @ symbol in each record, adds one to the index position because the domain name starts in the next position, and then uses the LEN Function to find the email length. Finally, the substring function extracts a portion of the string and terminates when the string is finished.=> (CHARINDEX('@',email)+1,LEN(email))

CTE common Table Expression:

WITH cte_name (column_names)   
AS (query)     
SELECT * FROM cte_name;   

Steps:
1 -> Definition of CTE
2-> The next step is to create a list of comma-separated columns. It ensures that the number of columns in the CTE definition arguments and the number of columns in the query must be the same. If we have not defined the CTE arguments' columns, it will use the query columns that define the CTE.
3 -> After that, we'll use the AS keyword after the expression name and then define a SELECT statement whose result set populates the CTE.
4 -> Finally, we will use the CTE name in a query such as SELECT, INSERT, UPDATE, DELETE, and MERGE statement.

Some of the clauses cannot be used 
ORDER BY unless you also use as TOP clause
INTO
OPTION clause with query hints
FOR BROWSE

